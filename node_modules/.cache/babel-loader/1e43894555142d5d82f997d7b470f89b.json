{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-44bf8136.js';\nimport { b as getIonMode, c as config } from './ionic-global-837be8f3.js';\nimport { s as sanitizeDOMString } from './index-79d74e0b.js';\nvar infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nvar InfiniteScroll =\n/** @class */\nfunction () {\n  function class_1(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n\n    this.position = 'bottom';\n\n    this.onScroll = function () {\n      var scrollEl = _this.scrollEl;\n\n      if (!scrollEl || !_this.canStart()) {\n        return 1;\n      }\n\n      var infiniteHeight = _this.el.offsetHeight;\n\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n\n      var scrollTop = scrollEl.scrollTop;\n      var scrollHeight = scrollEl.scrollHeight;\n      var height = scrollEl.offsetHeight;\n      var threshold = _this.thrPc !== 0 ? height * _this.thrPc : _this.thrPx;\n      var distanceFromInfinite = _this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;\n\n      if (distanceFromInfinite < 0) {\n        if (!_this.didFire) {\n          _this.isLoading = true;\n          _this.didFire = true;\n\n          _this.ionInfinite.emit();\n\n          return 3;\n        }\n      } else {\n        _this.didFire = false;\n      }\n\n      return 4;\n    };\n  }\n\n  class_1.prototype.thresholdChanged = function () {\n    var val = this.threshold;\n\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    } else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  };\n\n  class_1.prototype.disabledChanged = function () {\n    var disabled = this.disabled;\n\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n\n    this.enableScrollEvents(!disabled);\n  };\n\n  class_1.prototype.connectedCallback = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var contentEl, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            contentEl = this.el.closest('ion-content');\n\n            if (!contentEl) {\n              console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n              return [2\n              /*return*/\n              ];\n            }\n\n            _a = this;\n            return [4\n            /*yield*/\n            , contentEl.getScrollElement()];\n\n          case 1:\n            _a.scrollEl = _b.sent();\n            this.thresholdChanged();\n            this.disabledChanged();\n\n            if (this.position === 'top') {\n              writeTask(function () {\n                if (_this.scrollEl) {\n                  _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\n                }\n              });\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  class_1.prototype.disconnectedCallback = function () {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  };\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n\n\n  class_1.prototype.complete = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var scrollEl, prev_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        scrollEl = this.scrollEl;\n\n        if (!this.isLoading || !scrollEl) {\n          return [2\n          /*return*/\n          ];\n        }\n\n        this.isLoading = false;\n\n        if (this.position === 'top') {\n          /**\n           * New content is being added at the top, but the scrollTop position stays the same,\n           * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n           * (Frame 1)\n           *    - complete() is called, but the UI hasn't had time to update yet.\n           *    - Save the current content dimensions.\n           *    - Wait for the next frame using _dom.read, so the UI will be updated.\n           * (Frame 2)\n           *    - Read the new content dimensions.\n           *    - Calculate the height difference and the new scroll position.\n           *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n           * (Still frame 2, if I'm correct)\n           *    - Change the scroll position (= visually maintain the scroll position).\n           *    - Change the state to re-enable the InfiniteScroll.\n           *    - This should be after changing the scroll position, or it could\n           *    cause the InfiniteScroll to be triggered again immediately.\n           * (Frame 3)\n           *    Done.\n           */\n          this.isBusy = true;\n          prev_1 = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************\n\n          requestAnimationFrame(function () {\n            readTask(function () {\n              // UI has updated, save the new content dimensions\n              var scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n\n              var newScrollTop = scrollHeight - prev_1; // ******** DOM WRITE ****************\n\n              requestAnimationFrame(function () {\n                writeTask(function () {\n                  scrollEl.scrollTop = newScrollTop;\n                  _this.isBusy = false;\n                });\n              });\n            });\n          });\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  class_1.prototype.canStart = function () {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  };\n\n  class_1.prototype.enableScrollEvents = function (shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      } else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  };\n\n  class_1.prototype.render = function () {\n    var _a;\n\n    var mode = getIonMode(this);\n    var disabled = this.disabled;\n    return h(Host, {\n      class: (_a = {}, _a[mode] = true, _a['infinite-scroll-loading'] = this.isLoading, _a['infinite-scroll-enabled'] = !disabled, _a)\n    });\n  };\n\n  Object.defineProperty(class_1.prototype, \"el\", {\n    get: function () {\n      return getElement(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(class_1, \"watchers\", {\n    get: function () {\n      return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return class_1;\n}();\n\nInfiniteScroll.style = infiniteScrollCss;\nvar infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\nvar infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nvar InfiniteScrollContent =\n/** @class */\nfunction () {\n  function InfiniteScrollContent(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  InfiniteScrollContent.prototype.componentDidLoad = function () {\n    if (this.loadingSpinner === undefined) {\n      var mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  };\n\n  InfiniteScrollContent.prototype.render = function () {\n    var _a;\n\n    var mode = getIonMode(this);\n    return h(Host, {\n      class: (_a = {}, _a[mode] = true, // Used internally for styling\n      _a[\"infinite-scroll-content-\" + mode] = true, _a)\n    }, h(\"div\", {\n      class: \"infinite-loading\"\n    }, this.loadingSpinner && h(\"div\", {\n      class: \"infinite-loading-spinner\"\n    }, h(\"ion-spinner\", {\n      name: this.loadingSpinner\n    })), this.loadingText && h(\"div\", {\n      class: \"infinite-loading-text\",\n      innerHTML: sanitizeDOMString(this.loadingText)\n    })));\n  };\n\n  return InfiniteScrollContent;\n}();\n\nInfiniteScrollContent.style = {\n  ios: infiniteScrollContentIosCss,\n  md: infiniteScrollContentMdCss\n};\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };","map":{"version":3,"sources":["/Users/priyatalreja/Desktop/spectra-hacks/friendmatch/node_modules/@ionic/core/dist/esm-es5/ion-infinite-scroll_2.entry.js"],"names":["__awaiter","__generator","r","registerInstance","e","createEvent","c","writeTask","f","readTask","h","i","getElement","H","Host","b","getIonMode","config","s","sanitizeDOMString","infiniteScrollCss","InfiniteScroll","class_1","hostRef","_this","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","prototype","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","_a","_b","label","closest","console","error","getScrollElement","sent","clientHeight","disconnectedCallback","undefined","complete","prev_1","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","Object","defineProperty","get","enumerable","configurable","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","componentDidLoad","loadingSpinner","name","loadingText","innerHTML","ios","md","ion_infinite_scroll","ion_infinite_scroll_content"],"mappings":"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","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-44bf8136.js';\nimport { b as getIonMode, c as config } from './ionic-global-837be8f3.js';\nimport { s as sanitizeDOMString } from './index-79d74e0b.js';\nvar infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\nvar InfiniteScroll = /** @class */ (function () {\n    function class_1(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = function () {\n            var scrollEl = _this.scrollEl;\n            if (!scrollEl || !_this.canStart()) {\n                return 1;\n            }\n            var infiniteHeight = _this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            var scrollTop = scrollEl.scrollTop;\n            var scrollHeight = scrollEl.scrollHeight;\n            var height = scrollEl.offsetHeight;\n            var threshold = _this.thrPc !== 0 ? (height * _this.thrPc) : _this.thrPx;\n            var distanceFromInfinite = (_this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!_this.didFire) {\n                    _this.isLoading = true;\n                    _this.didFire = true;\n                    _this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                _this.didFire = false;\n            }\n            return 4;\n        };\n    }\n    class_1.prototype.thresholdChanged = function () {\n        var val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    };\n    class_1.prototype.disabledChanged = function () {\n        var disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    };\n    class_1.prototype.connectedCallback = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var contentEl, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) {\n                            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n                            return [2 /*return*/];\n                        }\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 1:\n                        _a.scrollEl = _b.sent();\n                        this.thresholdChanged();\n                        this.disabledChanged();\n                        if (this.position === 'top') {\n                            writeTask(function () {\n                                if (_this.scrollEl) {\n                                    _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\n                                }\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.disconnectedCallback = function () {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    };\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    class_1.prototype.complete = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var scrollEl, prev_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                scrollEl = this.scrollEl;\n                if (!this.isLoading || !scrollEl) {\n                    return [2 /*return*/];\n                }\n                this.isLoading = false;\n                if (this.position === 'top') {\n                    /**\n                     * New content is being added at the top, but the scrollTop position stays the same,\n                     * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n                     * (Frame 1)\n                     *    - complete() is called, but the UI hasn't had time to update yet.\n                     *    - Save the current content dimensions.\n                     *    - Wait for the next frame using _dom.read, so the UI will be updated.\n                     * (Frame 2)\n                     *    - Read the new content dimensions.\n                     *    - Calculate the height difference and the new scroll position.\n                     *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n                     * (Still frame 2, if I'm correct)\n                     *    - Change the scroll position (= visually maintain the scroll position).\n                     *    - Change the state to re-enable the InfiniteScroll.\n                     *    - This should be after changing the scroll position, or it could\n                     *    cause the InfiniteScroll to be triggered again immediately.\n                     * (Frame 3)\n                     *    Done.\n                     */\n                    this.isBusy = true;\n                    prev_1 = scrollEl.scrollHeight - scrollEl.scrollTop;\n                    // ******** DOM READ ****************\n                    requestAnimationFrame(function () {\n                        readTask(function () {\n                            // UI has updated, save the new content dimensions\n                            var scrollHeight = scrollEl.scrollHeight;\n                            // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                            var newScrollTop = scrollHeight - prev_1;\n                            // ******** DOM WRITE ****************\n                            requestAnimationFrame(function () {\n                                writeTask(function () {\n                                    scrollEl.scrollTop = newScrollTop;\n                                    _this.isBusy = false;\n                                });\n                            });\n                        });\n                    });\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    class_1.prototype.canStart = function () {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    };\n    class_1.prototype.enableScrollEvents = function (shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    };\n    class_1.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        var disabled = this.disabled;\n        return (h(Host, { class: (_a = {},\n                _a[mode] = true,\n                _a['infinite-scroll-loading'] = this.isLoading,\n                _a['infinite-scroll-enabled'] = !disabled,\n                _a) }));\n    };\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"watchers\", {\n        get: function () {\n            return {\n                \"threshold\": [\"thresholdChanged\"],\n                \"disabled\": [\"disabledChanged\"]\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return class_1;\n}());\nInfiniteScroll.style = infiniteScrollCss;\nvar infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\nvar infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\nvar InfiniteScrollContent = /** @class */ (function () {\n    function InfiniteScrollContent(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    InfiniteScrollContent.prototype.componentDidLoad = function () {\n        if (this.loadingSpinner === undefined) {\n            var mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    };\n    InfiniteScrollContent.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return (h(Host, { class: (_a = {},\n                _a[mode] = true,\n                // Used internally for styling\n                _a[\"infinite-scroll-content-\" + mode] = true,\n                _a) }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    };\n    return InfiniteScrollContent;\n}());\nInfiniteScrollContent.style = {\n    ios: infiniteScrollContentIosCss,\n    md: infiniteScrollContentMdCss\n};\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"]},"metadata":{},"sourceType":"module"}