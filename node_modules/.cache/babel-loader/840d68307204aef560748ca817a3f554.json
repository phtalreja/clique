{"ast":null,"code":"var HapticEngine = {\n  getEngine: function () {\n    var win = window;\n    return win.TapticEngine || win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics;\n  },\n  available: function () {\n    return !!this.getEngine();\n  },\n  isCordova: function () {\n    return !!window.TapticEngine;\n  },\n  isCapacitor: function () {\n    var win = window;\n    return !!win.Capacitor;\n  },\n  impact: function (options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style: style\n    });\n  },\n  notification: function (options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style: style\n    });\n  },\n  selection: function () {\n    this.impact({\n      style: 'light'\n    });\n  },\n  selectionStart: function () {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged: function () {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd: function () {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\n\nvar hapticSelection = function () {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\n\n\nvar hapticSelectionStart = function () {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\n\n\nvar hapticSelectionChanged = function () {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\n\n\nvar hapticSelectionEnd = function () {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\n\n\nvar hapticImpact = function (options) {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":{"version":3,"sources":["/Users/priyatalreja/Desktop/spectra/friend-match/node_modules/@ionic/core/dist/esm-es5/haptic-7b8ba70a.js"],"names":["HapticEngine","getEngine","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","isCordova","isCapacitor","impact","options","engine","style","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","a","b","c","d","h"],"mappings":"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","sourcesContent":["var HapticEngine = {\n    getEngine: function () {\n        var win = window;\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n    },\n    available: function () {\n        return !!this.getEngine();\n    },\n    isCordova: function () {\n        return !!window.TapticEngine;\n    },\n    isCapacitor: function () {\n        var win = window;\n        return !!win.Capacitor;\n    },\n    impact: function (options) {\n        var engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.impact({ style: style });\n    },\n    notification: function (options) {\n        var engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.notification({ style: style });\n    },\n    selection: function () {\n        this.impact({ style: 'light' });\n    },\n    selectionStart: function () {\n        var engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionStart();\n        }\n        else {\n            engine.gestureSelectionStart();\n        }\n    },\n    selectionChanged: function () {\n        var engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    },\n    selectionEnd: function () {\n        var engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionEnd();\n        }\n        else {\n            engine.gestureSelectionEnd();\n        }\n    }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nvar hapticSelection = function () {\n    HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nvar hapticSelectionStart = function () {\n    HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nvar hapticSelectionChanged = function () {\n    HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nvar hapticSelectionEnd = function () {\n    HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nvar hapticImpact = function (options) {\n    HapticEngine.impact(options);\n};\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n"]},"metadata":{},"sourceType":"module"}